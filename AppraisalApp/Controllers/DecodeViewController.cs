// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Text.RegularExpressions;
using ExtAppraisalApp.Models;
using ExtAppraisalApp.Services;
using ExtAppraisalApp.Utilities;
using Foundation;
using UIKit;
using Xamarin.Forms;

namespace ExtAppraisalApp
{
    public partial class DecodeViewController : UITableViewController
    {
        private LoginViewController loginViewController;

        public void SetDetailItem(LoginViewController masterViewController)
        {
            this.loginViewController = masterViewController;
        }

        partial void BtnCancel_Activated(UIBarButtonItem sender)
        {
            this.DismissModalViewController(true);


            ViewWorker worker = new ViewWorker();
            worker.WorkerDelegate = loginViewController;
            worker.UpdateUI(false);
        }

        partial void BtnDecode_Activated(UIBarButtonItem sender)
        {
                DoneDecodeVin();
        }

        public void DoneDecodeVin()
        {
            try
            {
                string email = txtEmail.Text;
                string vin = txtVin.Text;
                string firstname = txtFirstName.Text;
                string lastname = txtLastName.Text;
                string mileage = txtMileage.Text;
                string phone = txtPhone.Text;

                if (vin == "")
                {

                    Utilities.Utility.ShowAlert("First Name", "A username is required.!!", "OK");

                }
                else if (mileage == "")
                {
                    Utilities.Utility.ShowAlert("Mileagge", "A mileagge is required.!!", "OK");

                }
                else if (firstname == "")
                {
                    Utilities.Utility.ShowAlert("First Name", "A firstname is required.!!", "OK");

                }
                else if (!Regex.Match(firstname, @"^[a-zA-Z]*$").Success)
                {
                    Utilities.Utility.ShowAlert("First Name", "Your FirstName (" + firstname + ") is Incorrect", "OK");
                }
                else if (!Regex.Match(lastname, @"^[a-zA-Z]*$").Success)
                {
                    Utilities.Utility.ShowAlert("Last Name", "Your LastName (" + lastname + ") is Incorrect", "OK");

                }
                else if (lastname == "")
                {
                    Utilities.Utility.ShowAlert("Last Name", "A last is required.!!", "OK");

                }
                else if (!Regex.Match(vin, (@"^[A-HJ-NPR-Z0-9]{17}$")).Success)
                {
                    Utilities.Utility.ShowAlert("Vin", "Your Vin (" + vin + ") is Incorrect", "OK");

                }
                else if (!Regex.Match(email, (@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$")).Success)
                {
                    Utilities.Utility.ShowAlert("Email", "Your email (" + email + ") is Incorrect", "OK");

                }
                else if (phone.Length != 10)
                {
                    Utilities.Utility.ShowAlert("Phone", "Your phone (" + phone + ") is Incorrect", "OK");

                }
                else
                {
                    //decodeActivity.Hidden = false;
                    //decodeActivity.StartAnimating();
                    CreateAppraisalRequest apprrequest = new CreateAppraisalRequest();
                    AppraisalResponse appresponse = new AppraisalResponse();
                    apprrequest.VIN = txtVin.Text;
                    apprrequest.StoreID = AppDelegate.appDelegate.storeId;
                    apprrequest.Mileage = Convert.ToInt32(txtMileage.Text);
                    apprrequest.DDCUserId = "5A9C9038-DDC6-4BBE-8256-675F91D6B5B7";
                    appresponse = ServiceFactory.getWebServiceHandle().CreateAppraisalKBB(apprrequest);

                    Console.WriteLine("vehicle id :: " + appresponse.VehicleID);

                    AppDelegate.appDelegate.vehicleID = appresponse.VehicleID;
                    AppDelegate.appDelegate.storeId = appresponse.StoreID;
                    AppDelegate.appDelegate.invtrId = appresponse.InvtrID;
                    AppDelegate.appDelegate.trimId = appresponse.KBBTrimId;
                    AppDelegate.appDelegate.mileage = Convert.ToInt32(txtMileage.Text);

                    var storyboard = UIStoryboard.FromName("Main", null);
                    var splitViewController = storyboard.InstantiateViewController("SplitViewControllerID");
                    var appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
                    appDelegate.Window.RootViewController = splitViewController;
                    //decodeActivity.StopAnimating();
                }

            }
            catch (Exception exc)
            {
                System.Diagnostics.Debug.WriteLine("Exception occured :: " + exc.Message);
            }
        }

        public override void WillDisplayHeaderView(UITableView tableView, UIView headerView, nint section)
        {
            if (headerView.GetType() == typeof(UITableViewHeaderFooterView))
            {
                UITableViewHeaderFooterView tableViewHeaderFooterView = (UITableViewHeaderFooterView)headerView;
                tableViewHeaderFooterView.TextLabel.TextColor = UIColor.Black;
                var font = UIFont.SystemFontOfSize(18);
                tableViewHeaderFooterView.TextLabel.Font = font;
                tableViewHeaderFooterView.TextLabel.TextAlignment = UITextAlignment.Natural;
            }


        }

        ZXing.Mobile.MobileBarcodeScanner scanner;

        public override void ViewDidLoad()
        {
            try
            {
                
                decodeActivity.Hidden = true;
                txtVin.ShouldChangeCharacters = (textField, range, replacementString) => {
                    var newLength = textField.Text.Length + replacementString.Length - range.Length;
                    return newLength <= 17;
                };
                txtPhone.ShouldChangeCharacters = (textField, range, replacementString) => {
                    var newLength = textField.Text.Length + replacementString.Length - range.Length;
                    return newLength <= 10;
                };

                txtMileage.ShouldChangeCharacters = (textField, range, replacementString) => {
                    var newLength = textField.Text.Length + replacementString.Length - range.Length;
                    return newLength <= 6;
                };

                txtVin.AutocapitalizationType = UITextAutocapitalizationType.AllCharacters;
                txtVin.ShouldReturn = (tf) =>
                {
                    //txtMileage.SecureTextEntry = true;
                    txtMileage.ReturnKeyType = UIReturnKeyType.Next;
                    txtMileage.BecomeFirstResponder();
                    return true;
                };
                txtMileage.ShouldReturn = (tf) =>
                {
                    //txtFirstName.SecureTextEntry = true;
                    txtFirstName.ReturnKeyType = UIReturnKeyType.Next;
                    txtFirstName.BecomeFirstResponder();
                    return true;
                };
                txtFirstName.ShouldReturn = (tf) =>
                {
                    txtLastName.ReturnKeyType = UIReturnKeyType.Next;
                    txtLastName.BecomeFirstResponder();
                    return true;
                };
                txtLastName.ShouldReturn = (tf) =>
                {
                    txtEmail.ReturnKeyType = UIReturnKeyType.Next;
                    txtEmail.BecomeFirstResponder();
                    return true;
                };
                txtEmail.ShouldReturn = (tf) =>
                {
                    txtPhone.ReturnKeyType = UIReturnKeyType.Done;
                    txtPhone.BecomeFirstResponder();
                    return true;
                };
                txtPhone.ShouldReturn = (tf) =>
                {
                    txtPhone.EndEditing(true);
                    DoneDecodeVin();
                    return true;
                };

                // hide keyboard on touch outside area
                var g = new UITapGestureRecognizer(() => View.EndEditing(true));
                g.CancelsTouchesInView = false; //for iOS5
                View.AddGestureRecognizer(g);

                base.ViewDidLoad();
                // Perform any additional setup after loading the view, typically from a nib.

                if (this.btnScan != null)
                {
                    this.btnScan.TouchUpInside += async (sender, e) =>
                    {
                        scanner = new ZXing.Mobile.MobileBarcodeScanner(this);
                        scanner.UseCustomOverlay = false;
                        scanner.TopText = "Hold camera up to barcode to scan";
                        scanner.BottomText = "Barcode will automatically scan";
                        //scanner.FlashButtonText = "Flash";
                        scanner.CancelButtonText = "Cancel";
                        //scanner.Torch(true);
                        scanner.AutoFocus();
                        var result = await scanner.Scan(true);
                        HandleScanResult(result);
                    };
                }

            }
            catch (Exception exc)
            {
                System.Diagnostics.Debug.WriteLine("Exception :: " + exc.Message);
            }
        }
        public DecodeViewController() : base("DecodeViewController", null)
        {
        }

        public DecodeViewController(IntPtr handle) : base(handle)
        {
        }

        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
            // Release any cached data, images, etc that aren't in use.
        }





        public void HandleScanResult(ZXing.Result result)
        {
            string strScannedVIN = "";
            if (result != null && !string.IsNullOrEmpty(result.Text))
            {
                if (result.Text.Length == 18 && result.Text.StartsWith("I", StringComparison.Ordinal))
                {
                    String TrimmedText = result.Text.Substring(1);
                    System.Diagnostics.Debug.WriteLine("After Trimming:" + TrimmedText);
                    strScannedVIN = TrimmedText;
                }
                else
                {
                    strScannedVIN = result.Text;
                }

                txtVin.Text = strScannedVIN;

                //UIPasteboard.General.String = strScannedVIN;
                //Task.ShowToast("Copied to Clipboard").SetDuration(5000);
            }
            else
            {
                Utilities.Utility.ShowAlert("Vin Scan", "Scan Failed!!", "OK");

            }
        }

    }
}
