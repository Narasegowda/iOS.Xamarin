// This file has been autogenerated from a class added in the UI designer.

using System;
using ExtAppraisalApp.Models;
using ExtAppraisalApp.Services;
using Foundation;
using UIKit;

namespace ExtAppraisalApp
{
    public partial class DecodeViewController : UITableViewController
    {
        ZXing.Mobile.MobileBarcodeScanner scanner;
        partial void BtnDecodeVin_TouchUpInside(UIButton sender)
        {
            CreateAppraisalRequest apprrequest = new CreateAppraisalRequest();
            AppraisalResponse appresponse = new AppraisalResponse();
            apprrequest.VIN = txtVin.Text;
            apprrequest.StoreID = 2001;
            apprrequest.Mileage = Convert.ToInt32(txtMileage.Text);
            apprrequest.DDCUserId = "5A9C9038-DDC6-4BBE-8256-675F91D6B5B7";
            appresponse = ServiceFactory.getWebServiceHandle().CreateAppraisalKBB(apprrequest);
            //dynamic json = JsonConvert.DeserializeObject(data);

            // dynamic result = json.data;
        }


        partial void BtnCancel_TouchUpInside(UIButton sender)
        {
            this.DismissModalViewController(true);

        }

        public override void ViewDidLoad()
        {
            try
            {
                // hide keyboard on touch outside area
                var g = new UITapGestureRecognizer(() => View.EndEditing(true));
                g.CancelsTouchesInView = false; //for iOS5
                View.AddGestureRecognizer(g);


                base.ViewDidLoad();
                // Perform any additional setup after loading the view, typically from a nib.

                if (this.btnScan != null)
                {
                    this.btnScan.TouchUpInside += async (sender, e) =>
                    {
                        scanner = new ZXing.Mobile.MobileBarcodeScanner(this);
                        scanner.UseCustomOverlay = false;
                        scanner.TopText = "Hold camera up to barcode to scan";
                        scanner.BottomText = "Barcode will automatically scan";
                        //scanner.FlashButtonText = "Flash";
                        scanner.CancelButtonText = "Cancel";
                        //scanner.Torch(true);
                        scanner.AutoFocus();
                        var result = await scanner.Scan(true);
                        HandleScanResult(result);
                    };
                }
            }
            catch (Exception exc)
            {
                System.Diagnostics.Debug.WriteLine("Exception :: " + exc.Message);
            }
        }
        public DecodeViewController() : base("DecodeViewController", null)
        {
        }

        public DecodeViewController(IntPtr handle) : base(handle)
        {
        }



        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
            // Release any cached data, images, etc that aren't in use.
        }





        public void HandleScanResult(ZXing.Result result)
        {
            string strScannedVIN = "";
            if (result != null && !string.IsNullOrEmpty(result.Text))
            {
                if (result.Text.Length == 18 && result.Text.StartsWith("I", StringComparison.Ordinal))
                {
                    String TrimmedText = result.Text.Substring(1);
                    System.Diagnostics.Debug.WriteLine("After Trimming:" + TrimmedText);
                    strScannedVIN = TrimmedText;
                }
                else
                {
                    strScannedVIN = result.Text;
                }

                txtVin.Text = strScannedVIN;

                //UIPasteboard.General.String = strScannedVIN;
                //Task.ShowToast("Copied to Clipboard").SetDuration(5000);
            }
            else
            {
                UIAlertView alert = new UIAlertView();
                alert.Title = "Vin Scan";
                alert.Message = "Scan Failed!!";
                alert.AddButton("OK");
                alert.Clicked += delegate {
                    alert.DismissWithClickedButtonIndex(0, true);
                };
                alert.Show();
            }
        }






    }
}
